@using MySql.Data.MySqlClient;
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@using Agri_Cultured.Controllers;
@using Agri_Cultured.Pages;
<MudDialog Class="rz-background-color-base-800 rz-shadow-10 rz-border-radius-10 rz-p-1" Style="color: white; text-shadow: 5px px 3px black;">
    <TitleContent>
        Edit Fertilizer or Pesticide
    </TitleContent>
    <DialogContent>
        <MudCheckBox @bind-Checked="@Label_CheckBox2" Label="Fertilizer" Color="Color.Primary"></MudCheckBox>
        <MudCheckBox @bind-Checked="@Label_CheckBox3" Label="Pestiside" Color="Color.Secondary"></MudCheckBox>
        <MudTextField @bind-Value="@productname" T="string" Label="Product Name" Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true"></MudTextField>
        <MudTextField T="DateTime"@bind-Value="@dated" Format="yyyy-MM-dd" Label="Date Started" InputType="InputType.Date" Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true" />
        <RadzenButton Click="OpenNested" Text="Edit Item" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" />
        <MudDialog @bind-IsVisible="nestedVisible" Class="rz-background-color-base-800 rz-shadow-10 rz-border-radius-10 rz-p-1" Style="color: white; text-shadow: 5px px 3px black;">
            <TitleContent>
                Edit Item
            </TitleContent>
            <DialogContent>
                <MudTextField @bind-Value="@itemName" T="string" Label="Name" Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true"></MudTextField>
                <MudTextField @bind-Value="@itemDescription" T="string" Label="Description" Variant="MudBlazor.Variant.Filled" Lines="3" Style="margin-bottom: 15px;" />
                <MudTextField T="DateTime"@bind-Value="@dated" Format="yyyy-MM-dd" Label="Date Started" InputType="InputType.Date" Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Required="true" Style="margin-bottom: 15px;" />
                <MudTextField @bind-Value="@itemCost" Label="Item Cost" Variant="MudBlazor.Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" AdornmentColor="Color.Warning" Style="margin-bottom: 15px;" Required="true" />
            </DialogContent>
            <DialogActions>
                <MudButton Color="Color.Primary" OnClick="CloseNested">Close</MudButton>
            </DialogActions>
        </MudDialog>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string plantId { get; set; }
    [Parameter] public int fertpestId { get; set; }
    [Parameter] public int itemId { get; set; }
    DateTime dated = DateTime.Now;
    string dateFormatted;
    private string productname;
    private bool type;
    private string itemName;
    private string itemDescription;
    private float itemCost;



    async void Submit()
    {

        dateFormatted = dated.ToString("yyyy-MM-dd");
        await UpdateFertPest();
        NavigationManager.NavigateTo("/Fertilizer/" + plantId, forceLoad: true);
    }
    void Cancel() => MudDialog.Cancel();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {

    }

    async Task UpdateFertPest()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string updateFertPestquery = "UPDATE fert_pest SET type= @type, product_name= @productname, date= @date WHERE fert_pest_Id ='" + fertpestId + "'"; 
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(updateFertPestquery, connection))
        {
            connection.Open();
            command.Parameters.AddWithValue("@type", type);
            command.Parameters.AddWithValue("@productname", productname);
            command.Parameters.AddWithValue("@date", dateFormatted);
            await command.ExecuteNonQueryAsync();
            connection.Close();
        }

    }
    async Task UpdateItem()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySqlConnection connection = new MySqlConnection(connnectionString);
        string updateItemQuery = "UPDATE items SET item_name = @itemName, item_description = @itemDescription, cost = @itemCost, date = @date WHERE item_id = '" + Merge(fertpestId) + "'";
        using (MySqlCommand command = new MySqlCommand(updateItemQuery, connection))
        {
            connection.Open();
            command.Parameters.AddWithValue("@itemName", itemName);
            command.Parameters.AddWithValue("@itemDescription", itemDescription);
            command.Parameters.AddWithValue("@itemCost", itemCost);
            command.Parameters.AddWithValue("@itemDate", dateFormatted);
            command.Parameters.AddWithValue("@itemId", itemId);
            await command.ExecuteNonQueryAsync();
            connection.Close();
        }
    }

    private string Merge(int fertpestid)
    {
        string itemid="";
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySqlConnection connection = new MySqlConnection(connnectionString);
        string mergequery = "SELECT item_id FROM items WHERE fert_pest_fert_pest_Id='"+fertpestid+"'";
        using (MySqlCommand command = new MySqlCommand(mergequery, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(mergequery, connection);
            sqlcmd.CommandText = mergequery;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                itemid = rdr["item_id"].ToString();

            }
            rdr.Close();


            connection.Close();
        }
        return itemid;



        


    }

    // For checkboxes
    public bool Label_CheckBox2 { get; set; } = true;
    public bool Label_CheckBox3 { get; set; } = false;

    // For nested modal dialog
    private bool visible;
    private bool nestedVisible;
    private void Open() => visible = true;
    private void Close() => visible = false;
    private void OpenNested() => nestedVisible = true;
    private void CloseNested() => nestedVisible = false;

    //string sampleText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."; // For item description

    public double? Amount { get; set; } // For item cost
}