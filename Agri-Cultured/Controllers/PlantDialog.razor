@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

<MudDialog Class="rz-background-color-base-800 rz-shadow-10 rz-border-radius-10 rz-p-1" Style="color: white; text-shadow: 5px 3px 3px black;">
    <TitleContent>
        Create a new Plant
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" Label="Name" Variant="MudBlazor.Variant.Filled" @bind-Value=@planthasusers.Description Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true"></MudTextField>

        <RadzenDropDown AllowClear="true" Placeholder="Plant" @bind-Value=@createdplant.PlantName Data=@plants Style="width: 100%; max-width: 400px; margin-bottom: 15px" />

        <MudTextField T="DateTime" Format="yyyy-MM-dd" Label="Date Planted" @bind-Value=@dated InputType="InputType.Date" Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true" />

        <RadzenDropDown AllowClear="true" Placeholder="Region" @bind-Value=@planthasusers.Location Data=@lacations Style="width: 100%; max-width: 400px; margin-bottom: 15px" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public JSRuntime jSRuntime { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string dateonlyformated;
    DateTime dated = DateTime.Now;
    List<string> plants = new List<string>();
    List<Models.PlantsHasUser> phu = new List<Models.PlantsHasUser>();
    List<string> lacations = new List<string>();
    LinkedList<Tuple<string, Tuple<double, double>>> peripheries = new LinkedList<Tuple<string, Tuple<double, double>>>();

    //placeholder
    Models.Plant createdplant = new Models.Plant();
    Models.PlantsHasUser planthasusers = new Models.PlantsHasUser();



    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        lacations.Add("Attica");
        lacations.Add("Central Greece");
        lacations.Add("Central Macedonia");
        lacations.Add("Crete");
        lacations.Add("East Macedonia and Thrace");
        lacations.Add("Epirus");
        lacations.Add("Ionian Islands");
        lacations.Add("North Aegean");
        lacations.Add("Peloponnese");
        lacations.Add("South Aegean");
        lacations.Add("Thessaly");
        lacations.Add("West Greece");
        lacations.Add("West Macedonia");

        // average longtitude and latidute of each region/periphery
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("Attica", new Tuple<double, double>(38.07568709809507, 23.673109334822787)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("Central Greece", new Tuple<double, double>(38.63570676385782, 22.45413309232338)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("Central Macedonia", new Tuple<double, double>(40.798876539070875, 22.87369702319696)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("Crete", new Tuple<double, double>(35.18968554900035, 25.001839666579578)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("East Macedonia and Thrace", new Tuple<double, double>(41.112521636537494, 25.307941236463947)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("Epirus", new Tuple<double, double>(39.648065999220826, 20.735634183699922)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("Ionian Islands", new Tuple<double, double>(38.80527603016909, 20.665010468154655)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("North Aegean", new Tuple<double, double>(39.22310173317197, 26.08447023944656)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("Peloponnese", new Tuple<double, double>(37.58718401231568, 22.228931816422158)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("South Aegean", new Tuple<double, double>(37.106108505589, 25.493401835102667)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("Thessaly", new Tuple<double, double>(39.646651366889316, 21.96036354839707)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("West Greece", new Tuple<double, double>(38.19530903007895, 21.790900191202333)));
        peripheries.AddLast(new Tuple<string, Tuple<double, double>>("West Macedonia", new Tuple<double, double>(40.43123939308935, 21.485237920650242)));

        
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlmyfields = "SELECT plant_name FROM plants";
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlmyfields, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlmyfields, connection);
            sqlcmd.CommandText = sqlmyfields;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                string addplant = "";
                addplant = rdr["plant_name"].ToString();
                plants.Add(addplant);
            }
            rdr.Close();
            connection.Close();
        }

    }
    async void Submit()
    {
        string datetimeformated = dated.ToString("yyyy-MM-dd");
        dateonlyformated = datetimeformated;
        planthasusers.PlantsPlantId = plantnametoid(createdplant.PlantName);
        await plantsave();
        HandleDialogClose();
    }
    void Cancel()
    {
        MudDialog.Cancel();
        HandleDialogClose();
    }

    //Enable scrolling
    private void HandleDialogClose()
    {
        NavigationManager.NavigateTo("/Dashboard", forceLoad: true);
    }

    private int plantnametoid(string plantname)
    {
        int plantid = 0;
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlplantnametoid = "SELECT plant_Id FROM plants WHERE plant_name = '" + plantname + "'";
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlplantnametoid, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlplantnametoid, connection);
            sqlcmd.CommandText = sqlplantnametoid;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                plantid = (Int32)rdr["plant_Id"];
            }
            rdr.Close();
            connection.Close();
        }
        return plantid;
    }

    async Task plantsave()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlplantnames = "INSERT INTO plants_has_user (plants_plant_Id, aspnetusers_Id, date_planted, location, description ) VALUES (@plantid, @aspnetuser, @date, @location, @desc )";
        connection.Open();
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlplantnames, connection))
        {
            string a;
            a = await getUserId();
            command.Parameters.AddWithValue("@plantid",planthasusers.PlantsPlantId);
            command.Parameters.AddWithValue("@aspnetuser", a);
            command.Parameters.AddWithValue("@date", dateonlyformated);
            command.Parameters.AddWithValue("@location", planthasusers.Location);
            command.Parameters.AddWithValue("@desc", planthasusers.Description);
            await command.ExecuteNonQueryAsync();
            connection.Close();
        }        
    }
    async Task<string> getUserId()
    {
        return (await authenticationStateTask).User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }


}