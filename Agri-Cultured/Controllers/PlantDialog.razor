@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

<MudDialog Class="rz-background-color-base-800 rz-shadow-10 rz-border-radius-10 rz-p-1" Style="color: white; text-shadow: 5px 3px 3px black;">
    <TitleContent>
        Create a new Plant
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" Label="Name" Variant="MudBlazor.Variant.Filled" @bind-Value=@planthasusers.Description Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true"></MudTextField>

        <RadzenDropDown AllowClear="true" Placeholder="Plant" @bind-Value=@createdplant.PlantName Data=@plants Style="width: 100%; max-width: 400px; margin-bottom: 15px" />

        <MudTextField T="DateTime" Format="yyyy-MM-dd" Label="Date Planted" @bind-Value=@dated InputType="InputType.Date" Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true" />

        <RadzenDropDown AllowClear="true" Placeholder="City" @bind-Value=@planthasusers.Location Data=@cities Style="width: 100%; max-width: 400px; margin-bottom: 15px" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public JSRuntime jSRuntime { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string dateonlyformated;
    DateTime dated = DateTime.Now;
    List<string> plants = new List<string>();
    List<Models.PlantsHasUser> phu = new List<Models.PlantsHasUser>();

    //placeholder
    Models.Plant createdplant = new Models.Plant();
    Models.PlantsHasUser planthasusers = new Models.PlantsHasUser();

    IEnumerable<string> cities = new List<string>
    {
        new String("Thessaloniki"),
        new String("Serres"),
        new String("Kriti"),
        new String("Xanthi"),
        new String("Kastoria")
    };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlmyfields = "SELECT plant_name FROM plants";
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlmyfields, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlmyfields, connection);
            sqlcmd.CommandText = sqlmyfields;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                string addplant = "";
                addplant = rdr["plant_name"].ToString();
                plants.Add(addplant);
            }
            rdr.Close();
            connection.Close();
        }

    }
    async void Submit()
    {
        string datetimeformated = dated.ToString("yyyy-MM-dd");
        dateonlyformated = datetimeformated;
        planthasusers.PlantsPlantId = plantnametoid(createdplant.PlantName);
        await plantsave();
        HandleDialogClose();
    }
    void Cancel()
    {
        MudDialog.Cancel();
        HandleDialogClose();
    }

    //Enable scrolling
    private void HandleDialogClose()
    {
        NavigationManager.NavigateTo("/Dashboard", forceLoad: true);
    }

    private int plantnametoid(string plantname)
    {
        int plantid = 0;
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlplantnametoid = "SELECT plant_Id FROM plants WHERE plant_name = '" + plantname + "'";
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlplantnametoid, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlplantnametoid, connection);
            sqlcmd.CommandText = sqlplantnametoid;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                plantid = (Int32)rdr["plant_Id"];
            }
            rdr.Close();
            connection.Close();
        }
        return plantid;
    }

    async Task plantsave()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlplantnames = "INSERT INTO plants_has_user (plants_plant_Id, aspnetusers_Id, date_planted, location, description ) VALUES (@plantid, @aspnetuser, @date, @location, @desc )";
        connection.Open();
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlplantnames, connection))
        {
            string a;
            a = await getUserId();
            command.Parameters.AddWithValue("@plantid",planthasusers.PlantsPlantId);
            command.Parameters.AddWithValue("@aspnetuser", a);
            command.Parameters.AddWithValue("@date", dateonlyformated);
            command.Parameters.AddWithValue("@location", planthasusers.Location);
            command.Parameters.AddWithValue("@desc", planthasusers.Description);
            await command.ExecuteNonQueryAsync();
            connection.Close();
        }        
    }
    async Task<string> getUserId()
    {
        return (await authenticationStateTask).User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }
}