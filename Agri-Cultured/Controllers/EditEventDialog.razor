@using MySql.Data.MySqlClient;
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@using Agri_Cultured.Controllers;
<MudDialog Class="rz-background-color-base-800 rz-shadow-10 rz-border-radius-10 rz-p-1" Style="color: white; text-shadow: 5px px 3px black;">
    <TitleContent>
        Edit Event
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" Label="Name" @bind-Value=@name Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true"></MudTextField>
        <MudTextField T="DateTime?" @bind-Value=@date Format="yyyy-MM-dd" Label="Date Started" InputType="InputType.Date" Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true" />
        <MudTextField T="string" @bind-Value=@dmg Label="Damage" Variant="MudBlazor.Variant.Filled" Margin="Margin.Dense" Style="margin-bottom: 15px;" Required="true"></MudTextField>
        <MudNumericField @bind-Value=@perdmg Label="Percentage" Variant="MudBlazor.Variant.Filled" Min="0.0" Style="margin-bottom: 15px;" Required="true" />
        <MudTextField T="string" @bind-Value=@comm Label="Comments" Variant="MudBlazor.Variant.Filled" Lines="3" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string eventId { get; set; }
    private string name; 
    private DateTime? date; 
    private string dmg; 
    private double perdmg; 
    private string comm; 
    


    async void Submit()
    {
        try
        {
            await UpdateEvent();
            NavigationManager.NavigateTo("/Events/" + eventId, forceLoad: true);
        }
        catch (Exception e)
        {
            // handle exception
        }
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
    async Task UpdateEvent()
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");
        using (var connection = new MySqlConnection(connectionString))
        {
            connection.Open();
            string updateEventQuery = "UPDATE events SET name = @name, date = @date, damage = @dmg, perc_damage = @perdmg, comments = @comm WHERE event_id = @eventId";
            using (var command = new MySqlCommand(updateEventQuery, connection))
            {
                command.Parameters.AddWithValue("@name", name);
                command.Parameters.AddWithValue("@date", date?.ToString("yyyy-MM-dd"));
                command.Parameters.AddWithValue("@dmg", dmg);
                command.Parameters.AddWithValue("@perdmg", perdmg);
                command.Parameters.AddWithValue("@comm", comm);
                command.Parameters.AddWithValue("@eventId", eventId);

                await command.ExecuteNonQueryAsync();
            }
        }
    }

    public double DoubleValue { get; set; } // For hours

    string sampleText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."; // For comments
}