@page "/Events/{plantid}"
@inject IDialogService DialogService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@using Controllers
@using MySql.Data.MySqlClient;

<PageTitle>Events</PageTitle>

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
    <h3 style="color: #015249; text-shadow: 0px 2px 3px #015249; margin-right: 10px;">Events</h3>
    @*Add new plant button*@
    <div style="display: flex; justify-content: flex-end; flex-grow: 1;">
        <RadzenButton Icon="add" Click="(() => OpenCreateEventDialog())" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-10" />
    </div>
</div>

<RadzenRow JustifyContent="JustifyContent.Start" AlignItems="Radzen.AlignItems.Center" Gap="0">
    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
        <RadzenColumn Size="12" Style="justify-self:center; align-self:center">
            @foreach (Models.Event a in events)
            {
            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:auto; height:470px;  background-image: linear-gradient(180deg, rgb(87, 188, 144) 0%, rgb(0119, 201, 212) 70%); color: #015249; text-shadow: 0px 1px 3px gray;">
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                    <RadzenStack Gap="0" Style="align-self:center">
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-display-flex rz-mt-2 rz-my-0" Style="color: white; text-shadow: 0px 2px 3px gray; font-size: 18px;"><b>Event</b></RadzenText>
                    </RadzenStack>
                </RadzenStack>
                <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:325px; width:100%; overflow-y: auto">
                    <RadzenRow RowGap="0">
                        <RadzenColumn SizeXS="12">
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Event Name:</strong></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.Name</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Date Started:</strong></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.Date</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn SizeXS="12" Style="margin-top: 5%">
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Damage:</strong></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.Damage</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Percentage:</strong></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.PercDamage %</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Comments:</strong></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">
                                        @a.Comments
                                    </RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
                <div class="mt-2">
                        <RadzenButton Click="(() => EditEventDialog(a.EventId))" Icon="edit" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenButton Click="(()=> DeleteEvent(a.EventId)) " Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                </div>
            </RadzenCard>
            }
        </RadzenColumn>
    </RadzenRow>
</RadzenRow>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string plantid { get; set; }


    List<Models.Event> events = new List<Models.Event>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlmyevents = "SELECT * FROM events WHERE event_id IN ( SELECT event_id FROM events_has_plants WHERE plants_user_Id = '"+plantid+"' AND event_id IN (SELECT event_id FROM plants_has_user WHERE aspnetusers_Id = '" + await getUserId() + "'))";

        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection);
            sqlcmd.CommandText = sqlmyevents;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Models.Event myevent = new Models.Event();
                myevent.EventId = (Int32)rdr["event_id"];
                myevent.Name = rdr["name"].ToString();
                myevent.Date = DateOnly.FromDateTime((DateTime)rdr["date"]);
                myevent.Damage = rdr["damage"].ToString();
                myevent.PercDamage = (Int32)rdr["perc_damage"];
                myevent.Comments = rdr["comments"].ToString();
                events.Add(myevent);
            }
            rdr.Close();
            connection.Close();
        }
    }
    async Task<string> getUserId()
    {
        return (await authenticationStateTask).User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }

    //Create new event dialog
    private void OpenCreateEventDialog()
    {
        var options = new MudBlazor.DialogOptions { };
        var parameters = new DialogParameters();
        parameters.Add("plantID", plantid);
        DialogService.Show<EventDialog>(" ", parameters, options);
    }

    //Edit event dialog
    private void EditEventDialog(int eventId)
    {
        var options = new MudBlazor.DialogOptions { };
        var parameters = new DialogParameters();
        parameters.Add("plantId", plantid);
        parameters.Add("eventId", eventId);
        DialogService.Show<EditEventDialog>(" ", parameters, options);
    }

    private void DeleteEvent(int eventId)
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySqlConnection connection = new MySqlConnection(connnectionString);
        string sqldeleteevent = "DELETE FROM events WHERE event_id ='" + eventId + "'";
        using (MySqlCommand command = new MySqlCommand(sqldeleteevent, connection))
        {
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }
        NavigationManager.NavigateTo("/Events/" + plantid, forceLoad: true); //refresh page to delete the item        

    }
}