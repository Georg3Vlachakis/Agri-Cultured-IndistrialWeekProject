@page "/Agriculturaltasks/{plantid}"
@inject IDialogService DialogService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@using Controllers
@using MySql.Data.MySqlClient;

<PageTitle>Agricultural Tasks</PageTitle>

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
    <h3 style="color: #015249; text-shadow: 0px 2px 3px #015249; margin-right: 10px;">Agricultural Tasks</h3>
    @*Add new plant button*@
    <div style="display: flex; justify-content: flex-end; flex-grow: 1;">
        <RadzenButton Icon="add" Click="(() => OpenCreateTaskDialog())" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-10" />
    </div>
</div>


<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
    @foreach (Models.Task a in AgrTask)
    {
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:auto; height:470px;  background-image: linear-gradient(180deg, rgb(87, 188, 144) 0%, rgb(0119, 201, 212) 70%); color: #015249; text-shadow: 0px 1px 3px gray;">
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
            <RadzenStack Gap="0" Style="align-self:center">
                <RadzenText TextStyle="TextStyle.Body1" Style="color: white; text-shadow: 0px 2px 3px gray; font-size: 17px;" class="rz-display-flex rz-mt-2 rz-my-0"><b>Task</b></RadzenText>
            </RadzenStack>
        </RadzenStack>
        <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:330px; width:100%; overflow-y: auto">
            <RadzenRow RowGap="0">
                <RadzenColumn SizeXS="12">
                    <RadzenRow>
                        <RadzenColumn>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px"><strong>Task Name:</strong></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Style="color: white">@a.TaskName</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                     <RadzenRow>
                        <RadzenColumn>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px"><strong>Date Started:</strong></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"Style="color: white;">@a.DateStarted</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenColumn>
                <RadzenColumn SizeXS="12" Style="margin-top: 25%">
                    <RadzenRow>
                        <RadzenColumn>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px"><strong>Workers N:</strong></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.WorkerNumber</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px"><strong>Cost:</strong></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.Cost</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
        <div class="mt-2">
            <RadzenButton Click="(() => EditTaskDialog())" Icon="edit" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Click="(() => DeleteTasks(a.TaskId))" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
        </div>
    </RadzenCard>
    }
</RadzenRow>

@code {
    [Parameter]
    public string plantid { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<Models.Task> AgrTask = new List<Models.Task>();


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlmytasks = "SELECT t.* FROM tasks AS t INNER JOIN op_tasks AS ot ON t.task_id = ot.task_id INNER JOIN plants_has_user AS phu ON phu.plants_user_Id = ot.plants_user_Id WHERE phu.aspnetusers_Id = '" + await getUserId() + "' AND phu.plants_user_Id = '" + plantid + "'";

        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlmytasks, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlmytasks, connection);
            sqlcmd.CommandText = sqlmytasks;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Models.Task tasks = new Models.Task();
                tasks.TaskId = (Int32)rdr["task_id"];
                tasks.TaskName = rdr["task_name"].ToString();
                tasks.DateStarted = DateOnly.FromDateTime((DateTime)rdr["date_started"]);
                tasks.WorkerNumber = (Int32)rdr["worker_number"];
                //make it float in db
                tasks.Cost = (float)rdr["Cost"];
                AgrTask.Add(tasks);
            }
            rdr.Close();
            connection.Close();
        }
    }

    //Delete Tasks
    void DeleteTasks(int taskId)
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySqlConnection connection = new MySqlConnection(connnectionString);
        string sqldeleteirrigation = "DELETE FROM tasks WHERE task_id = '" + taskId + "'";
        using (MySqlCommand command = new MySqlCommand(sqldeleteirrigation, connection))
        {
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }
        NavigationManager.NavigateTo("/Agriculturaltasks/" + plantid, forceLoad: true); //refresh page to delete the item
    }

    async Task<string> getUserId()
    {
        return (await authenticationStateTask).User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }

    //Create new task dialog
    private void OpenCreateTaskDialog()
    {
        var options = new MudBlazor.DialogOptions { };
        var parameters = new DialogParameters();
        parameters.Add("plantID", plantid);
        DialogService.Show<TaskDialog>(" ", parameters, options);
    }

    //Edit task dialog
    private void EditTaskDialog()
    {
        var options = new MudBlazor.DialogOptions { };
        DialogService.Show<EditTaskDialog>(" ", options);
    }
}