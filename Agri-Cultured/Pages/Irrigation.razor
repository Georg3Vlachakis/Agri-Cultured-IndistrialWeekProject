@page "/Irrigation/{plantid}"
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject NavigationManager NavigationManager;
@using Controllers
@using MySql.Data.MySqlClient;


<PageTitle>Irrigation</PageTitle>

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
    <h3 style="color: #015249; text-shadow: 0px 2px 3px #015249; margin-right: 10px;">Irrigations</h3>
    @*Add new plant button*@
    <div style="display: flex; justify-content: flex-end; flex-grow: 1;">
        <RadzenButton Icon="add" Click="(() => OpenCreateIrrigationDialog())" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" class="rz-border-radius-10 rz-shadow-10" />
    </div>
</div>

<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
    <RadzenColumn Size="12" Style="justify-self:center; align-self:center">
        @foreach (Models.Irrigation irrigation in irrigations)
        {
            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:88vw; height:470px;  background-image: linear-gradient(180deg, rgb(87, 188, 144) 0%, rgb(0119, 201, 212) 70%); color: #015249; text-shadow: 0px 1px 3px gray;">
            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                <RadzenStack Gap="0" Style="align-self:center">
                    <RadzenText TextStyle="TextStyle.Body1" class="rz-display-flex rz-mt-2 rz-my-0" Style="color: white; text-shadow: 0px 2px 3px gray; font-size: 15px;"><b>Irrigation</b></RadzenText>
                </RadzenStack>
            </RadzenStack>
            <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:325px; width:100%; overflow-y: auto">
                <RadzenRow RowGap="0">
                    <RadzenColumn SizeXS="12">
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Date Started:</strong></RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@irrigation.Date.ToString()</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenColumn>
                    <RadzenColumn SizeXS="12" Style="margin-top: 20%">
                        <RadzenRow>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Hours:</strong></RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@irrigation.Hours.ToString() hour(s)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Cost:</strong></RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@irrigation.Cost.ToString() &euro;</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
            <div class="mt-2">
                <RadzenButton Click="(() => EditIrrigationDialog())" Icon=" edit" ButtonStyle="ButtonStyle.Primary" /> @*Edit button*@
                <RadzenButton Icon="delete" Click="(() => DeleteIrrigation(irrigation.IrrigationsId))" ButtonStyle="ButtonStyle.Danger" /> @*Delete button*@
            </div>
        </RadzenCard>
        }
    </RadzenColumn>
</RadzenRow>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string plantid { get; set; }

    List<Models.Irrigation> irrigations = new List<Models.Irrigation>();


    async Task<string> getUserId()
    {
        return (await authenticationStateTask).User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }

    protected override async Task OnInitializedAsync()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySqlConnection connection = new MySqlConnection(connnectionString);
        string orfeas = "SELECT i.*, p.`plants_user_Id`, p.`aspnetusers_Id` FROM `agridata`.`irrigation` AS i INNER JOIN `agridata`.`op_irrigation` AS oi ON oi.`iirrigations_Id` = i.`irrigations_Id` INNER JOIN `agridata`.`plants_has_user` AS p ON p.`plants_user_Id` = oi.`plants_user_Id` WHERE p.`plants_user_Id` = '" + plantid + "' AND p.`aspnetusers_Id` = '" + await getUserId() + "';";

        using (MySqlCommand command = new MySqlCommand(orfeas, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(orfeas, connection);
            sqlcmd.CommandText = orfeas;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Models.Irrigation irr = new Models.Irrigation();
                irr.IrrigationsId = (Int32)rdr["irrigations_Id"];
                irr.Hours = (Int32)rdr["hours"];
                irr.Cost = (float)rdr["cost"];
                irr.Date = DateOnly.FromDateTime((DateTime)rdr["date"]);
                irrigations.Add(irr);
            }
            rdr.Close();
            connection.Close();
        }
    }

    //Delete Irrigation
    void DeleteIrrigation(int irrigationId)
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySqlConnection connection = new MySqlConnection(connnectionString);
        string sqldeleteirrigation = "DELETE i, oi FROM `agridata`.`irrigation` AS i LEFT JOIN `agridata`.`op_irrigation` AS oi ON oi.`iirrigations_Id` = i.`irrigations_Id` WHERE i.`irrigations_Id` = '" + irrigationId + "';";
        using (MySqlCommand command = new MySqlCommand(sqldeleteirrigation, connection))
        {
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }
        NavigationManager.NavigateTo("/Irrigation/" + plantid, forceLoad: true); //refresh page to delete the item
    }

    //Create new irrigation operetion dialog
    private void OpenCreateIrrigationDialog()
    {
        var options = new MudBlazor.DialogOptions { };
        DialogService.Show<IrrigationDialog>(" ", options);
    }

    //Edit irrigation operetion dialog
    private void EditIrrigationDialog()
    {
        var options = new MudBlazor.DialogOptions { };
        DialogService.Show<EditIrrigationDialog>(" ", options);
    }
}


