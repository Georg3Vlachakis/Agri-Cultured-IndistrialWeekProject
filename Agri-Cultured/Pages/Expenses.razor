@page "/Expenses/{plantid}"
@inject IDialogService DialogService
@inject IConfiguration Configuration
@using Controllers

<PageTitle>Other Expenses</PageTitle>

<h3 style="color: #015249; text-shadow: 0px 2px 3px #015249;">Other Expenses</h3>

<RadzenRow JustifyContent="JustifyContent.Start" AlignItems="Radzen.AlignItems.Center" Gap="0">
    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
        <RadzenColumn Size="12" Style="justify-self:center; align-self:center">
            @foreach(Models.Expence a in exp)
            {
            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:auto; height:470px;  background-image: linear-gradient(180deg, rgb(87, 188, 144) 0%, rgb(0119, 201, 212) 70%); color: #015249; text-shadow: 0px 1px 3px gray;">
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                    <RadzenStack Gap="0" Style="align-self:center">
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-display-flex rz-mt-2 rz-my-0" Style="color: white; text-shadow: 0px 2px 3px gray; font-size: 17px;"><b>Expense</b></RadzenText>
                    </RadzenStack>
                </RadzenStack>
                <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:325px; width:100%; overflow-y: auto">
                    <RadzenRow RowGap="0">
                        <RadzenColumn SizeXS="12">
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Expense Name:</strong></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.ExpenceType</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Date:</strong></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.Date</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn SizeXS="12" Style="margin-top: 15%">
                            <RadzenRow>
                                <RadzenColumn>
                                    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" Style="color: #015249; font-size: 12px;"><strong>Cost:</strong></RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Style="color: white;">@a.ExpenceAmmount</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
                <div class="mt-2">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                </div>
            </RadzenCard>
            }
        </RadzenColumn>
    </RadzenRow>
</RadzenRow>
<RadzenButton Text="Create" Icon="add" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Large" Style="width: 48%; height: 15%; font-size: 25px; justify-content: center" />

@code {
    [Parameter]
    public string plantid { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<Models.Expence> exp = new List<Models.Expence>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlmyevents = "SELECT e.* FROM expences AS e JOIN expences_has_plants AS ep ON e.expences_Id = ep.expences_Id JOIN plants_has_user AS pu ON ep.plants_user_Id = pu.plants_user_Id WHERE pu.aspnetusers_Id = '" + await getUserId() + "' AND pu.plants_user_Id = '" + plantid + "'";
        
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection);
            sqlcmd.CommandText = sqlmyevents;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Models.Expence myexp = new Models.Expence();
                myexp.ExpencesId = (Int32)rdr["expences_Id"];
                myexp.ExpenceType = rdr["expence_type"].ToString();
                myexp.ExpenceAmmount = (Int32)rdr["expence"];
                myexp.Date = DateOnly.FromDateTime((DateTime)rdr["date"]);
                exp.Add(myexp);
            }
            rdr.Close();
            connection.Close();
        }
    }

    async Task<string> getUserId()
    {
        return (await authenticationStateTask).User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }
}
