@page "/History"
@using Agri_Cultured.Controllers;
@using Agri_Cultured.Data;
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
    <h3 style="color: #015249; text-shadow: 0px 2px 3px #015249; margin-right: 10px; margin-bottom: 20px;">Search/History</h3>
</RadzenRow>

<RadzenRow JustifyContent="JustifyContent.SpaceEvenly" AlignItems="Radzen.AlignItems.Center" Gap="0" Style=" margin-bottom:20px;">
    <MudButton OnClick="OpenNetIncomeDialog" Style="width: 25%">Net Income</MudButton>
</RadzenRow>

<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
    <MudTable T="Search" Items="@searches" Dense="true" Hover="@hover" Bordered="true" Filter="new Func<Search,bool>(FilterFunc1)" @bind-SelectedItem="selectedTask">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Diary</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Description</MudTh>
		</HeaderContent>
		<RowTemplate>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>
</RadzenRow>



@code {
    private bool dense = false;
    private bool hover = true;
    private string searchString = "";
    private Search selectedTask = null;
    public HashSet<Search> searches = new HashSet<Search>
    {
        new Search("21/09/98", "idswabguiyabsdgby gayuiodgb aybgoia gvdyasg voyyoasdovgyuiasv dsguoysavy"),
        new Search("21/09/98", "idswabguiyabsdgby gayuiodgb aybgoia gvdyasg voyyoasdovgyuiasv dsguoysavy"),
        new Search("21/09/98", "idswabguiyabsdgby gayuiodgb aybgoia gvdyasg voyyoasdovgyuiasv dsguoysavy"),
        new Search("21/09/98", "idswabguiyabsdgby gayuiodgb aybgoia gvdyasg voyyoasdovgyuiasv dsguoysavy"),
    };

    private bool FilterFunc1(Search search) => FilterFunc(search, searchString);

    private bool FilterFunc(Search search, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (search.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string plantid { get; set; }
    static DateTime oneYearAgo = DateTime.Now.AddYears(-1).Date;
    string oneyearagoformated = oneYearAgo.ToString("yyyy-MM-dd");


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        float annualexpenses = await AnnualExpenses();
        float annualincome = await AnnualIncome();
        float annualnetprofit = annualincome - annualexpenses;
    }

    async Task<float> AnnualExpenses()
    {
        float addexp = 0;
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlmyevents = "SELECT e.expense_ammount FROM expenses AS e JOIN expenses_has_plants AS ep ON e.expenses_Id = ep.expenses_Id JOIN plants_has_user AS pu ON ep.plants_user_Id = pu.plants_user_Id WHERE pu.aspnetusers_Id = '" + await getUserId() + "' AND e.date >= '" + oneyearagoformated + "'";

        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection);
            sqlcmd.CommandText = sqlmyevents;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                addexp = addexp + (float)rdr["expense_ammount"];
            }
            rdr.Close();
            connection.Close();
        }
        return (float)addexp;
    }
    async Task<float> AnnualIncome()
    {
        float addinc = 0;
        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlmyevents = "SELECT i.income FROM income AS i JOIN income_has_plants AS ihp ON i.income_id = ihp.income_id JOIN plants_has_user AS pu ON ihp.plants_user_Id = pu.plants_user_Id WHERE pu.aspnetusers_Id = '" + await getUserId() + "' AND i.date >= '" + oneyearagoformated + "'";

        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection);
            sqlcmd.CommandText = sqlmyevents;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                addinc = addinc + (float)rdr["income"];
            }
            rdr.Close();
            connection.Close();
        }
        return addinc;
    }
    async Task<string> getUserId()
    {
        return (await authenticationStateTask).User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }

    //Dialogs
    private void OpenNetIncomeDialog()
    {
        var options = new MudBlazor.DialogOptions { FullWidth=true };
        DialogService.Show<AnnualNetIncomeDialog>(" ", options);
    }
}
