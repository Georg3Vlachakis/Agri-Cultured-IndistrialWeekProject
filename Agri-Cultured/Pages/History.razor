@page "/History"
@using Agri_Cultured.Controllers;
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
    <h3 style="color: #015249; text-shadow: 0px 2px 3px #015249; margin-right: 10px; margin-bottom: 20px;">Search/History</h3>
</RadzenRow>

<RadzenRow JustifyContent="JustifyContent.SpaceEvenly" AlignItems="Radzen.AlignItems.Center" Gap="0" Style=" margin-bottom:20px;">
    <MudButtonGroup Color="Color.Primary" Variant="MudBlazor.Variant.Text">
        <MudButton OnClick="OpenNetIncomeDialog" Style="width: 25%">Net Income</MudButton>
        <MudButton OnClick="OpenEventsDialog" Style="width: 25%">Events</MudButton>
        <MudButton OnClick="OpenTasksDialog" Style="width: 25%">Tasks</MudButton>
        <MudButton OnClick="OpenFertPestDialog" Style="width: 25%">Fertilizers - Pesticides</MudButton>
    </MudButtonGroup>
</RadzenRow>

<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
	<MudTable Style="background-image: linear-gradient(180deg, rgb(0, 0, 50) 5%, rgb(102, 255, 178) 100%); color: white; text-shadow: 5px 0px 5px black;" Items="@Tasks" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Task,bool>(FilterFunc1)" @bind-SelectedItem="selectedTask">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Tasks</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Name</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Name">@context.Name</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>
</RadzenRow>



@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";
    private Task selectedTask = null;
    private HashSet<Task> selectedTasks = new HashSet<Task>();

    private IEnumerable<Task> Tasks = new List<Task>
    {
        new Task { Name = "Task 1" },
        new Task { Name = "Task 2" },
        new Task { Name = "Task 3" }
    };

    private bool FilterFunc1(Task task) => FilterFunc(task, searchString);

    private bool FilterFunc(Task task, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (task.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public class Task
    {
        public string Name { get; set; }
    }
}

@*<MudItem xs="12" md="6">
    <MudText Typo="Typo.h6" GutterBottom="true">Search History</MudText>
    <MudPaper Width="100%" Style="background-image: linear-gradient(180deg, rgb(87, 188, 144) 0%, rgb(0119, 201, 212) 70%); color: #015249; text-shadow: 0px 2px 3px gray;">
        <MudList Clickable="@Clickable" Dense="@Dense" DisableGutters="@Gutters">
            <MudListItem Text="Single List Item" />
            <MudDivider />
            <MudListItem Text="Single List Item" />
            <MudDivider />
            <MudListItem Text="Single List Item" />
        </MudList>
    </MudPaper>
</MudItem>*@

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string plantid { get; set; }
    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        float annualexpenses = await AnnualExpenses();
    }

    async Task<float> AnnualExpenses()
    {
        float addexp = 0;
        DateTime oneYearAgo = DateTime.Now.AddYears(-1).Date;
        string oneyearagoformated = oneYearAgo.ToString("yyyy-MM-dd");

        var connnectionString = Configuration.GetConnectionString("DefaultConnection");
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connnectionString);
        string sqlmyevents = "SELECT e.* FROM expenses AS e JOIN expenses_has_plants AS ep ON e.expenses_Id = ep.expenses_Id JOIN plants_has_user AS pu ON ep.plants_user_Id = pu.plants_user_Id WHERE pu.aspnetusers_Id = '" + await getUserId() + "' AND e.date >= '" + oneyearagoformated + "'";

        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(sqlmyevents, connection);
            sqlcmd.CommandText = sqlmyevents;
            sqlcmd.CommandType = System.Data.CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                addexp = addexp + (float)rdr["expense_ammount"];
            }
            rdr.Close();
            connection.Close();
        }
        return (float)addexp;
    }
    async Task<string> getUserId()
    {
        return (await authenticationStateTask).User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    }

    //Dialogs
    private void OpenNetIncomeDialog()
    {
        var options = new MudBlazor.DialogOptions { FullWidth=true };
        DialogService.Show<AnnualNetIncomeDialog>(" ", options);
    }

    private void OpenEventsDialog()
    {
        var options = new MudBlazor.DialogOptions { };
        DialogService.Show<AnnualEventsDialog>(" ", options);
    }

    private void OpenTasksDialog()
    {
        var options = new MudBlazor.DialogOptions { };
        DialogService.Show<AnnualTasksDialog>(" ", options);
    }

    private void OpenFertPestDialog()
    {
        var options = new MudBlazor.DialogOptions { };
        DialogService.Show<AnnualFertPestDialog>(" ", options);
    }
}
